import subprocess
from os import fspath
from pathlib import Path

import constants


def run_command(cmdstr):
    p = subprocess.Popen(cmdstr, bufsize=1, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, universal_newlines=True,
                         encoding='utf8', shell=True)

    return p.stdout.readline().strip()


def preprocess_brainmask(fsl_anat):
    bm = fsl_anat / 'T1_biascorr_brain_mask.nii.gz'
    orig = fsl_anat / 'T1_orig'
    roi2orig = fsl_anat / 'T1_roi2orig.mat'

    # dilate bm with 20 mm box kernel
    dil_bm = str(bm).split('.')[0] + '_dil15box.nii.gz'
    dil = f"fslmaths {bm} -dilD -kernel box 15 {dil_bm}"

    # apply roi2orig transformation
    dil_bm2orig = dil_bm.split('.')[0] + '2orig.nii.gz'
    to_orig = f"flirt -in {dil_bm} -ref {orig} -applyxfm -init {roi2orig} -out {dil_bm2orig}"

    # run commands
    print(f"Dilating and transforming the brainmask...\n {run_command('; '.join([dil, to_orig]))}")

    if Path(dil_bm2orig).exists():
        return dil_bm2orig
    else:
        return f"Cannot find the dilated and transformed brainmask. Please check your commands."


def main():
    # load required modules
    print(run_command('module load fsl'))

    for scan in constants.T1W_SCANS:
        entities = scan.name.split('_')
        subj_outdir = constants.OUTPUTS_DIR.joinpath(entities[0], entities[1], 'anat')
        prefix = scan.name.split('.')[0]

        print(f"Processing {subj_outdir}")

        # binarizing the afni defaced image to get the defacemask (or inverted facemask)
        ar_wrkdir = subj_outdir.joinpath('afni_refacer', '__work*' + prefix + '*')
        fm_binv_facemask = f"fslmaths {ar_wrkdir.joinpath('tmp.99.result.deface.nii')} -bin {subj_outdir.joinpath(prefix + '_defacemask.nii.gz')}"
        print(f"binarizing the afni defaced image to get the defacemask (or inverted facemask)..\n "
              f"{run_command(fm_binv_facemask)}")

        # preprocess the brain mask generated by fsl_anat
        fa_outdir = subj_outdir / 'fsl_anat'
        dil_bm2orig = preprocess_brainmask(fa_outdir)

        # plug the zeros in afni inverted defacemask using the t1_orig_zeros file
        fm_t1_zeros_mask = f"fslmaths {fa_outdir / 'T1_orig'} -binv {subj_outdir / 'T1_orig_zeros'}"
        fm_plug_zeros = f"fslmaths {subj_outdir / 'T1_orig_zeros'} -add {subj_outdir.joinpath(prefix + '_defacemask.nii.gz')} " \
                        f"{subj_outdir / 'afni_inv_facemask_plugged'}"
        print(f"Plugging zeros in defacemask (or inverted facemask) that also overlap with brain mask...\n "
              f"{run_command('; '.join([fm_t1_zeros_mask, fm_plug_zeros]))}")

        # paths to eyemask and the dilated eyemask generated by bet
        fb_outdir = subj_outdir / 'fsl_bet'
        em = fb_outdir.joinpath(prefix + '_bet_tmp_eye_mask.nii.gz')
        dil_em = fb_outdir.joinpath(prefix + '_bet_tmp_eyes7dil.nii.gz')

        # cmd to find the overlap between dil brain mask and dil eye mask
        outfile_1 = subj_outdir.joinpath(prefix + '_modified_dil_eye_mask')
        fm_dil_overlap = f"fslmaths {dil_bm2orig} -sub {dil_em} -uthr -1 -mul -1 {outfile_1}"
        print(f"Generating the overlap mask between dilated brain mask and dilated eye mask..\n "
              f"{run_command(fm_dil_overlap)}")

        # cmd to find the overlap between dil brain mask and eyemask
        outfile_2 = subj_outdir.joinpath(prefix + '_modified_eye_mask')
        fm_overlap = f"fslmaths {dil_bm2orig} -sub {em} -uthr -1 -mul -1 {outfile_2}"
        print(f"Generating the overlap mask between dilated brain mask and eye mask..\n "
              f"{run_command(fm_overlap)}")
        print("DONE\n*******************************************************\n")


if __name__ == "__main__":
    main()
