import subprocess
from os import fspath
from pathlib import Path

import constants


def run_command(cmdstr):
    p = subprocess.Popen(cmdstr, bufsize=1, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, universal_newlines=True,
                         encoding='utf8', shell=True)

    return p.stdout.readline().strip()


def preprocess_brainmask(fsl_anat):
    bm = fsl_anat / 'T1_biascorr_brain_mask.nii.gz'
    orig = fsl_anat / 'T1_orig'
    roi2orig = fsl_anat / 'T1_roi2orig.mat'

    # dilate bm with 20 mm box kernel
    dil_bm = str(bm).split('.')[0] + '_dil20box.nii.gz'
    dil = f"fslmaths {bm} -dilD -kernel box 20 {dil_bm}"

    # apply roi2orig transformation
    dil_bm2orig = dil_bm.split('.')[0] + '2orig.nii.gz'
    to_orig = f"flirt -in {dil_bm} -ref {orig} -applyxfm -init {roi2orig} -out {dil_bm2orig}"

    # run commands
    print(f"Dilating and transforming the brainmask...\n {run_command('; '.join([dil, to_orig]))}")

    if Path(dil_bm2orig).exists():
        return dil_bm2orig
    else:
        return f"Cannot find the dilated and transformed brainmask. Please check your commands."


def preprocess_facemask(fm_path):
    prefix = fm_path.parent.joinpath('afni_facemask')
    binarized = fm_path.parent.joinpath('afni_facemask_binarized.nii.gz')

    # split the 4D volume
    c1 = f"fslroi {fm_path} {prefix} 1 1"

    # arithmetic on the result from above
    c2 = f"fslmaths {prefix}.nii.gz -abs -bin {binarized}"
    print(f"Splitting the facemask volume at {fm_path} and binarizing the resulting volume... \n "
          f"{run_command('; '.join([c1, c2]))}")
    if binarized.exists():
        return binarized
    else:
        return f"Cannot find the binarized facemask. Please check your commands."


def main():
    for scan in constants.T1W_SCANS:
        entities = scan.name.split('_')
        acq = entities[2].split('-')[1]
        subj_outdir = constants.OUTPUTS_DIR.joinpath(entities[0], entities[1], 'anat')
        prefix = scan.name.split('.')[0]

        print(f"Processing {subj_outdir}")

        # binarizing the afni defaced image to get the defacemask (or inverted facemask)
        ar_outdir = subj_outdir.joinpath('afni_refacer', acq)
        try:
            ar_wrkdir = list(ar_outdir.glob('__work*'))[0]

            # preprocess facemask
            raw_facemask_volumes = ar_wrkdir.joinpath('tmp.05.sh_t2a_thr.nii')
            facemask = preprocess_facemask(raw_facemask_volumes)

            # preprocess the brain mask generated by fsl_anat
            fa_outdir = subj_outdir / 'fsl_anat' / '.'.join([acq, 'anat'])
            dil_bm2orig = preprocess_brainmask(fa_outdir)

            # paths to eyemask and the dilated eyemask generated by bet
            fb_outdir = subj_outdir / 'fsl_bet' / acq
            em = fb_outdir.joinpath(prefix + '_bet_tmp_eye_mask.nii.gz')
            dil_em = fb_outdir.joinpath(prefix + '_bet_tmp_eyes7dil.nii.gz')

            # dilated brain mask (fsl_anat) minus dilated eye mask (fsl_bet)
            outfile_1 = subj_outdir.joinpath(prefix + '_modified_dil_eye_mask')
            fm_dil_overlap = f"fslmaths {dil_bm2orig} -sub {dil_em} -uthr -1 -mul -1 {outfile_1}"
            print(f"Generating the overlap mask between dilated brain mask and dilated eye mask..\n "
                  f"{run_command(fm_dil_overlap)}")

            # dilated brain mask (fsl_anat) minus eye mask (fsl_bet)
            outfile_2 = subj_outdir.joinpath(prefix + '_modified_eye_mask')
            fm_overlap = f"fslmaths {dil_bm2orig} -sub {em} -uthr -1 -mul -1 {outfile_2}"
            print(f"Generating the overlap mask between dilated brain mask and eye mask..\n "
                  f"{run_command(fm_overlap)}")
            print("DONE\n*******************************************************\n")
        except:
            pass


if __name__ == "__main__":
    main()
