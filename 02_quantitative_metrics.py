import argparse
import csv
import json
import subprocess
import time
from pathlib import Path

import numpy as np
import pandas as pd


def get_args():
    parser = argparse.ArgumentParser(
        description='Generate a swarm command file to deface T1w scans for a given BIDS dataset.')

    parser.add_argument('-in', action='store', dest='input',
                        help='Path to input BIDS dataset.')

    parser.add_argument('-out', action='store', dest='output',
                        help='Path to output dataset.')

    args = parser.parse_args()
    return Path(args.input), Path(args.output)


def run_command(cmdstr):
    p = subprocess.Popen(cmdstr, bufsize=1, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, universal_newlines=True,
                         encoding='utf8', shell=True)

    return p.stdout.readline().strip()


def get_brainmask_stats(bmask_path):
    stats_cmd = f"fslstats {bmask_path} -V"
    voxels, volume = run_command(stats_cmd).split(' ')
    return float(voxels), float(volume)


def get_bm_overlap_fm_stats(brainmask, facemask):
    stats_cmd = f"fslstats {brainmask} -k {facemask} -V"
    voxels, volume = run_command(stats_cmd).split(' ')
    return float(voxels), float(volume)


def get_fm_minus_dil_em_stats(facemask, dil_em):
    stats_cmd = f"fslstats {facemask} -k {dil_em} -V"
    voxels, volume = run_command(stats_cmd).split(' ')
    return float(voxels), float(volume)


def get_fm_minus_em_stats(facemask, em):
    stats_cmd = f"fslstats {facemask} -k {em} -V"
    voxels, volume = run_command(stats_cmd).split(' ')
    return float(voxels), float(volume)


def preprocess_brainmask(afni_dir):
    bmask = list(afni_dir.joinpath('skullstrip').glob('*_skullstrip_binarized.nii.gz'))[0]

    # dilate bm with 20 mm box kernel
    dil_bmask = str(bmask).split('.')[0] + '_dil20box.nii.gz'
    dil = f"fslmaths {bmask} -dilD -kernel box 20 {dil_bmask}"

    # run commands
    print(f"Dilating brainmask...\n {run_command(dil)}")

    if Path(dil_bmask).exists():
        return dil_bmask
    else:
        return f"Cannot find the dilated brainmask. Please check your commands."


def preprocess_facemask(fmask_path):
    prefix = fmask_path.parent.joinpath('afni_facemask')
    binarized = fmask_path.parent.joinpath('afni_facemask_binarized.nii.gz')

    # split the 4D volume
    c1 = f"fslroi {fmask_path} {prefix} 1 1"

    # arithmetic on the result from above
    c2 = f"fslmaths {prefix}.nii.gz -abs -bin {binarized}"
    print(f"Splitting the facemask volume at {fmask_path} and binarizing the resulting volume... \n "
          f"{run_command('; '.join([c1, c2]))}")
    if binarized.exists():
        return binarized
    else:
        return f"Cannot find the binarized facemask. Please check your commands."


def main():
    input, output = get_args()
    t1_set = set(list(input.glob('sub-*/ses-*/anat/*_run-*1_*T1w.nii.gz')))
    df_columns = ["subject_id", "acquisition", "brainmask_voxels", "facemask_voxels",
                  "brainmask_overlap_facemask_voxels"]
    index_range = range(len(t1_set))
    df = pd.DataFrame(columns=df_columns, index=index_range)

    idx = 0

    for scan in t1_set:
        entities = scan.name.split('_')
        subjid = scan.name.split('_')[0]
        acq = entities[2].split('-')[1]
        subj_outdir = output.joinpath(subjid, entities[1], 'anat')
        prefix = scan.name.split('.')[0]

        print(f"Processing {subjid}")

        # binarizing the afni defaced image to get the defacemask (or inverted facemask)
        afni_outdir = subj_outdir.joinpath(acq, 'afni')
        try:
            ar_wrkdir = list(afni_outdir.joinpath('refacer').glob('__work*'))[0]

            # preprocess facemask
            raw_facemask_volumes = ar_wrkdir.joinpath('tmp.05.sh_t2a_thr.nii')
            facemask = preprocess_facemask(raw_facemask_volumes)

            # preprocess the brain mask generated by afni 3Dskullstrip
            dil_bmask = preprocess_brainmask(afni_outdir)

            df.at[idx, 'subject_id'] = subjid
            df.at[idx, 'acquisition'] = acq

            # brainmask stats
            brainmask_voxel, brainmask_volume = get_brainmask_stats(dil_bmask)
            df.at[idx, "brainmask_voxels"] = brainmask_voxel

            # facemask stats
            facemask_voxel, facemask_volume = run_command(f"fslstats {facemask} -V").split(' ')
            df.at[idx, "facemask_voxels"] = float(facemask_voxel)

            # brainmask & facemask overlap stats
            cmd_outs = get_bm_overlap_fm_stats(dil_bmask, facemask)
            df.at[idx, "brainmask_overlap_facemask_voxels"] = cmd_outs[0]
            print(df.loc[idx, :].tolist())
            print("done.\n*******************************************************\n")
            idx += 1

        except:
            pass

    df.to_csv(f"evaluation_{time.strftime('%Y-%m-%d')}.csv", quoting=csv.QUOTE_MINIMAL, index=False, header=True)


if __name__ == "__main__":
    main()
